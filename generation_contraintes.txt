\section{Génération de contraintes}
Pour générer dynamiquement les contraintes d'élimination de sous-tours, on utilise des callbacks. A partir d'une solution donnée à une certaine étape de l'algorithme, si on a une solution entière, on cherche à ajouter des "lazy cuts", on cherche donc si on a des contraintes non respectées. On aura grâce aux contraintes (?) et (?) un ou plusieurs cycles : on parcourt donc le cycle auquel appartient le sommet source, et tous les sommets n'appartenant pas à ce cycle forment l'ensemble $S$ pour lequel la contrainte ? n'est pas respectée, on rajoute alors cette contrainte dans le solveur. Si $S$ est vide, alors cette solution est réalisable pour le problème de TSP, on obtient une borne primale de notre problème.

Si à un n\oe ud de l'arbre de branchement, on a une solution fractionnaire, on va chercher à ajouter des "user cuts". Pour savoir quel ensemble $S$ on utilise pour rajouter une contrainte (?), on utilise un algorithme de flot maximum du n\oe ud source à un n\oe ud destination, renvoyant la valeur du flot ainsi que la distance de chaque sommet à ce n\oe ud destination dans le graphe résiduel. On cherche alors un n\oe ud destination pour lequel le flot maximum n'est pas égal à 1 : tous les n\oe uds étant à une distance strictement inférieure à $n$ (en nombre d'arcs) (avec n le nombre de sommets du graphe) du sommet destination dans le graphe résiduel constitueront alors notre ensemble $S$.